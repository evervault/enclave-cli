---
name: Compile CLI for Target
on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      release_dir:
        required: true
        type: string
      artifact_name: 
        required: true
        type: string
      platform:
        required: true
        type: string
      version:
        required: true
        type: string
      vcpkgrs_dynamic:
        required: false
        type: number
        default: 0
      musl:
        required: false
        type: boolean
        default: false
      musl_suffix:
        required: false
        type: string
        default: ''
      profile:
        required: false
        type: string
        default: 'default'
    secrets:
      RUST_CRYPTO_REGISTRY:
        required: true
      CARGO_REGISTRIES_EVERVAULT_RUST_LIBRARIES_TOKEN:
        required: true
jobs:
  compile:
    name: Compile CLI for ${{ inputs.target }}
    runs-on: ${{ inputs.platform }}
    env:
      VCPKGRS_DYNAMIC: ${{ inputs.vcpkgrs_dynamic }}
      BIN_DIR: bin
    steps:
      - uses: actions/checkout@v2

      - name: Setup cross compilation
        if: ${{ inputs.musl && inputs.musl_suffix != '' && inputs.platform == 'ubuntu-latest' }}
        # Running /etc/lsb-release exports the DISTRIB_CODENAME variable which contains the OS codename used in ubuntu repositories
        # We then configure the existing apt sources to be scoped to amd64, and add the arm64 architecture sources before install musl-tools
        run: |
          . /etc/lsb-release
          sudo sed 's/deb http/deb \[arch=amd64\] http/' -i /etc/apt/sources.list
          sudo dpkg --add-architecture arm64
          sudo touch /etc/apt/sources.list.d/arm64.list
          sudo echo "deb [arch=arm64] http://ports.ubuntu.com/ $DISTRIB_CODENAME main universe restricted multiverse" >> /etc/apt/sources.list.d/arm64.list
          sudo echo "deb [arch=arm64] http://ports.ubuntu.com/ $DISTRIB_CODENAME-updates main universe restricted multiverse" >> /etc/apt/sources.list.d/arm64.list
          sudo echo "deb [arch=arm64] http://ports.ubuntu.com/ $DISTRIB_CODENAME-security main universe restricted multiverse" >> /etc/apt/sources.list.d/arm64.list
          apt update
          apt-get install musl-tools:arm64

      - name: Install musl-tools
        if: ${{ inputs.musl && inputs.musl_suffix == '' }}
        run: sudo apt-get install musl-tools

      - name: Install Rust
        run: rustup update --no-self-update stable && rustup default stable

      - uses: actions-rs/toolchain@v1
        with:
          profile: ${{ inputs.profile }}
          toolchain: nightly
          target: ${{ inputs.target }}
          override: true
          
      - name: Inject Version
        run: |
          sh ./scripts/insert-cli-version.sh ${{ inputs.version }}
      
      - name: Download cached dependencies
        uses: Swatinem/rust-cache@v2
        with:
            shared-key: "${{ inputs.target }}-cross-builds"

      - name: Setup directories
        shell: bash
        run: |
          mkdir ${{ env.BIN_DIR }}
          mkdir ${{ inputs.release_dir }}

      - name: Build CLI
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          toolchain: nightly
          command: build
          args: --release --target ${{ inputs.target }} -Z registry-auth
        env:
          CARGO_REGISTRIES_EVERVAULT_RUST_LIBRARIES_INDEX: ${{ secrets.RUST_CRYPTO_REGISTRY }}
          CARGO_REGISTRIES_EVERVAULT_RUST_LIBRARIES_TOKEN: ${{ secrets.CARGO_REGISTRIES_EVERVAULT_RUST_LIBRARIES_TOKEN }}

      - name: Compress macos binary
        if: ${{ inputs.platform == 'macos-latest' }}
        uses: svenstaro/upx-action@v2
        with:
          file: target/${{ inputs.target }}/release/ev-cage
          args: --best --lzma
          strip: true

      - name: Install 7zip
        if: ${{ inputs.platform == 'macos-latest' }}
        run: brew install p7zip
      
      - name: Compress Binary
        run: |
          mv ./target/${{ inputs.target }}/release/ev-cage ./${{ env.BIN_DIR }}/ev-cage
          7z a -ttar -so -an ./${{ env.BIN_DIR }} | 7z a -si ./${{ inputs.release_dir }}/ev-cage-${{ inputs.target }}-${{ inputs.version }}.tar.gz
        
      - name: Upload as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.artifact_name }}
          path: ./${{ inputs.release_dir }}