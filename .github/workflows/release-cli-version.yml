---
name: Release Cage CLI version

on:
  push

env:
  RUST_BACKTRACE: 1
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  WINDOWS_ARM_TARGET: aarch64-pc-windows-msvc
  MACOS_TARGET: x86_64-apple-darwin
  MACOS_ARM_TARGET: aarch64-apple-darwin
  LINUX_TARGET: x86_64-unknown-linux-musl
  LINUX_ARM_TARGET: aarch64-unknown-linux-musl
  STAGE: production

  # Directories to target during release
  BIN_DIR: bin
  RELEASE_DIR: release

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - id: get-version
        # run: |
        #   echo "using version tag ${GITHUB_REF:11}"
        #   echo "version=${GITHUB_REF:11}" >> "$GITHUB_OUTPUT"
        run: |
          echo "using version tag ${GITHUB_REF:11}"
          echo "version=0.0.0" >> "$GITHUB_OUTPUT"

  compile-cli-for-target:
    needs: get-version
    strategy:
      matrix:
        target: [ "x86_64-unknown-linux-musl", "aarch64-unknown-linux-musl", "x86_64-apple-darwin", "aarch64-apple-darwin", "x86_64-pc-windows-msvc", "aarch64-pc-windows-msvc" ]
        include:
          # Set default for musl and vcpkgrs_dynamic, will be overridden for specific targets
          - musl: false
            vcpkgrs_dynamic: 0
            musl_suffix: ""
          - target: x86_64-unknown-linux-musl
            release_dir: "linux-x86"
            artifact_name: "linux-x86"
            platform: "ubuntu-latest"
            musl: true
            profile: "minimal"
          - target: aarch64-unknown-linux-musl
            release_dir: "linux-arm64"
            artifact_name: "linux-arm64"
            platform: "ubuntu-latest"
            musl: true
            musl_suffix: ":arm64"
            profile: "minimal"
          - target: x86_64-apple-darwin
            release_dir: "apple-x86"
            artifact_name: "apple-x86"
            platform: "macos-latest"
          - target: aarch64-apple-darwin
            release_dir: "apple-arm64"
            artifact_name: "apple-arm64"
            platform: "macos-latest"
          - target: x86_64-pc-windows-msvc
            release_dir: "windows-x86"
            artifact_name: "windows-x86"
            platform: "windows-latest"
            vcpkgrs_dynamic: 1
          - target: aarch64-pc-windows-msvc
            release_dir: "windows-arm64"
            artifact_name: "windows-arm64"
            platform: "windows-latest"
            vcpkgrs_dynamic: 1
    uses: ./.github/workflows/compile-cli-for-target.yml
    with:
      target: ${{ matrix.target }}
      release_dir: ${{ matrix.release_dir }}
      artifact_name: ${{ matrix.artifact_name }}
      platform: ${{ matrix.platform }}
      version: ${{ needs.get-version.outputs.version }}
      musl: ${{ matrix.musl }}
      musl_suffix: ${{ matrix.musl_suffix }}
      vcpkgrs_dynamic: ${{ matrix.vcpkgrs_dynamic }}
    secrets: inherit

  # release-cli-version:
  #   needs: [ get-version, compile-linux-x86, compile-linux-arm64, compile-macos-x86, compile-macos-arm64, compile-windows-x86, compile-windows-arm64 ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create Release
  #       id: create-release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ needs.get-version.outputs.version }}
  #         release_name: ${{ needs.get-version.outputs.version }}
      
  #     - name: Download MacOS x86 Artifacts
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: macos-x86

  #     - name: Download MacOS Arm Artifacts
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: macos-arm64
      
  #     - uses: cloudposse/github-action-matrix-outputs-read@v0.1.1
  #       id: read-linux
  #       with:
  #         matrix-step-name: compile-ubuntu

  #     - name: Download Linux x86 Artifacts
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: linux-x86

  #     - name: Download Linux Arm Artifacts
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: linux-arm64

  #     - name: Download Windows x86 Artifacts
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: windows-x86

  #     - name: Download Windows Arm Artifacts
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: windows-arm64

  #     - name: Upload Linux x86 Release
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: ./linux-x86/ev-cage-${{ env.LINUX_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz
  #         asset_content_type: application/gzip
  #         asset_name: ev-cage-${{ env.LINUX_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz

  #     - name: Upload Linux arm64 Release
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: ./linux-arm64/ev-cage-${{ env.LINUX_ARM_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz
  #         asset_content_type: application/gzip
  #         asset_name: ev-cage-${{ env.LINUX_ARM_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz

  #     - name: Upload MacOS x86 Release
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: ./macos-x86/ev-cage-${{ env.MACOS_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz
  #         asset_content_type: application/gzip
  #         asset_name: ev-cage-${{ env.MACOS_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz

  #     - name: Upload MacOS arm64 Release
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: ./macos-arm64/ev-cage-${{ env.MACOS_ARM_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz
  #         asset_content_type: application/gzip
  #         asset_name: ev-cage-${{ env.MACOS_ARM_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz

  #     - name: Upload Windows x86 Release
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: ./windows-x86/ev-cage-${{ env.WINDOWS_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz
  #         asset_content_type: application/gzip
  #         asset_name: ev-cage-${{ env.WINDOWS_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz

  #     - name: Upload Windows arm64 Release
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: ./windows-arm64/ev-cage-${{ env.WINDOWS_ARM_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz
  #         asset_content_type: application/gzip
  #         asset_name: ev-cage-${{ env.WINDOWS_ARM_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz

  upload-artifacts-to-s3:
    needs: [ get-version, compile-cli-for-target ]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download MacOS x86 Artifacts
        uses: actions/download-artifact@v1
        with:
          name: macos-x86

      - name: Download MacOS arm64 Artifacts
        uses: actions/download-artifact@v1
        with:
          name: macos-arm64

      - name: Download Linux x86 Artifacts
        uses: actions/download-artifact@v1
        with:
          name: linux-x86

      - name: Download Linux arm64 Artifacts
        uses: actions/download-artifact@v1
        with:
          name: linux-arm64

      - name: Download Windows x86 Artifacts
        uses: actions/download-artifact@v1
        with:
          name: windows-x86

      - name: Download Windows arm64 Artifacts
        uses: actions/download-artifact@v1
        with:
          name: windows-arm64

      - name: Validate artifacts exist as expected - Windows
        run: |
          ls ./windows-x86
          ls ./windows-arm64

      - name: Validate artifacts exist as expected - Macos
        run: |
          ls ./macos-x86
          ls ./macos-arm64

      - name: Validate artifacts exist as expected - Linux
        run: |
          ls ./linux-x86
          ls ./linux-arm64

      # - name: Upload Windows CLI to S3
      #   run: |
      #     aws s3 cp ./windows-x86/ev-cage-${{ env.WINDOWS_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz s3://cage-build-assets-${{ env.STAGE }}/cli/${{ needs.get-version.outputs.version }}/${{ env.WINDOWS_TARGET }}/ev-cage.tar.gz
      #     aws s3 cp ./windows-arm64/ev-cage-${{ env.WINDOWS_ARM_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz s3://cage-build-assets-${{ env.STAGE }}/cli/${{ needs.get-version.outputs.version }}/${{ env.WINDOWS_ARM_TARGET }}/ev-cage.tar.gz

      # - name: Upload MacOS CLI to S3
      #   run: |
      #     aws s3 cp ./macos-x86/ev-cage-${{ env.MACOS_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz s3://cage-build-assets-${{ env.STAGE }}/cli/${{ needs.get-version.outputs.version }}/${{ env.MACOS_TARGET }}/ev-cage.tar.gz
      #     aws s3 cp ./macos-arm64/ev-cage-${{ env.MACOS_ARM_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz s3://cage-build-assets-${{ env.STAGE }}/cli/${{ needs.get-version.outputs.version }}/${{ env.MACOS_ARM_TARGET }}/ev-cage.tar.gz

      # - name: Upload Linux CLI to S3
      #   run: |
      #     aws s3 cp ./linux-x86/ev-cage-${{ env.LINUX_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz s3://cage-build-assets-${{ env.STAGE }}/cli/${{ needs.get-version.outputs.version }}/${{ env.LINUX_TARGET }}/ev-cage.tar.gz
      #     aws s3 cp ./linux-arm64/ev-cage-${{ env.LINUX_ARM_TARGET }}-${{ needs.get-version.outputs.version }}.tar.gz s3://cage-build-assets-${{ env.STAGE }}/cli/${{ needs.get-version.outputs.version }}/${{ env.LINUX_ARM_TARGET }}/ev-cage.tar.gz

      # - uses: actions/checkout@v2
      # - name: Update install script in S3
      #   run: |
      #     sh ./scripts/generate-installer.sh ${{ needs.get-version.outputs.version }}
      #     aws s3 cp scripts/install s3://cage-build-assets-${{ env.STAGE }}/cli/${{needs.get-version.outputs.version}}/install
      #     aws s3 cp scripts/install s3://cage-build-assets-${{ env.STAGE }}/cli/install
      #     aws s3 cp scripts/version s3://cage-build-assets-${{ env.STAGE }}/cli/${{needs.get-version.outputs.version}}/version
      #     aws s3 cp scripts/version s3://cage-build-assets-${{ env.STAGE }}/cli/version
      #     aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/cli/install"
      #     aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/cli/version"
